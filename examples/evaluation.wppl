var data = [1, 2];

var model = function() {

  initContext(data);

  var tau = sampleDaipp(Gamma({shape: 1, scale: 1}));

  var mu = sampleDaipp(Gaussian({mu: 0, sigma: 1 / Math.sqrt(tau)}));

  var d = mapData(data, function(datum) {

    factor(Gaussian({mu: mu, sigma: 1 / Math.sqrt(tau)}).score(datum));

  });

  return [mu, tau];
};


var model2 = function() {
  var mu = param(0);

  var x = sample(Gaussian({mu: 2, sigma: 1}), {
    guide: Gaussian({mu: mu, sigma: 1})
  });
};

// This is supposed to be a proto-wakey-sleepy-epoch.

// Q. How are we going to stitch VI/TT together in the final thing?

// Q. When alternating between optimizing two different objectives,
// what do we do with the state maintained by the optimization
// methods?

var improveParams = function(params) {

  // `EvaluateGuide` is an attempt to compute ESS for a single datum.

  // Q. Does it compute the right thing?

  // datumIndex controls which data point will be mapped over by
  // mapData during evaluation.

  // TODO: Compute importance weights for the mini-batch we're about
  // to use for optimization?

  var ess1 = EvaluateGuide(model, {datumIndex: 0, params: params});
  var ess2 = EvaluateGuide(model, {datumIndex: 1, params: params});

  display(ess1);
  display(ess2);
  display('--------------------');

  // Do a few optimization steps.

  return Optimize(model, {
    params: params,
    steps: 50,
    method: {gd: {stepSize: 0.001}},
    estimator: {ELBO: {samples: 100}},
    verbose: false
  });
};

var iterate = function(fn, initialVal, n) {
  var iter = function(i, val) {
    return  (i < n) ? iter(i + 1, fn(val)) : val;
  };
  return iter(0, initialVal);
};

iterate(improveParams, {}, 100);

'done';

// Example output:

// Processing daipp/examples/evaluation.wppl
// 18.61140277153167
// 10.838783883182332
// --------------------
// Gradient for param "_139_131_127":0 is zero.
// 26.845862822776365
// 31.111059507856353
// --------------------
// 9.274745033713328
// 15.025259323381393
// --------------------
// 30.5650710681452
// 21.857003689918514
// --------------------
// 27.28580069574539
// 22.026537397931317
// --------------------
// 21.594819950681437
// 40.947737040619984
// --------------------
// 22.33416806650785
// 30.296469209738145
// --------------------
// 16.19092064477716
// 45.52377334984425
// --------------------
// 7.057003397657739
// 41.23052132398537
// --------------------
// 33.26954536332534
// 47.79059001664938
// --------------------
//
// ...
//
