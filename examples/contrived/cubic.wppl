var model = function() {

  var sigma = 1;

  var a1 = sample(Gaussian({mu: 0, sigma: sigma}));
  var a2 = sample(Gaussian({mu: 0, sigma: sigma}));

  factor(Gaussian({mu: a2 - Math.pow(a1, 3), sigma: .1}).score(0));

  return [a1, a2];

};

var modelDaipp = function() {

  var sigma = 1;

  initContext('init');

  var a1 = sampleDaipp(Gaussian({mu: 0, sigma: sigma}));
  var a2 = sampleDaipp(Gaussian({mu: 0, sigma: sigma}));

  factor(Gaussian({mu: a2 - Math.pow(a1, 3), sigma: .1}).score(0));

  return [a1, a2];

};

var runmcmc = function() {
  return _.pluck(Infer({
    method: 'MCMC',
    justSample: true,
    samples: 1000,
    burn: 100,
    kernel: {HMC: {stepSize: .01, steps: 20}}
  }, model).samples, 'value');
};

var rundaipp = function() {
  var params = Optimize(modelDaipp, {
    steps: 50000,
    // Which methods other than gd + momentum + clipping make
    // progress?
    method: {gd: {stepSize: .0001, mu: 0.9}},
    clip: 50,
    showGradNorm: false,
    estimator: 'ELBO'
  });
  return SampleGuide(modelDaipp, {samples: 1000, params: params}).support();
};

//var samples = runmcmc();
var samples = rundaipp();
viz.scatter(map(first, samples), map(second, samples));

'done';
