
// ----------------------------------------------------------------------------

// Gotta have a model
if (typeof model === 'undefined') {
	util.fatal('No model defined.');
}

// ----------------------------------------------------------------------------

// Prepare data

// One of 'targetModel', 'trainingData' must be defined
if (typeof targetModel === 'undefined' && typeof trainingData === 'undefined') {
	util.fatal('Model must define either "targetModel" or "trainingData"');
}

// Training data is either provided or generated from targetModel
var _trainingData = (function() {
	if (typeof trainingData === 'undefined') {
		return repeat(opts.nGenTrainingData, function() { return targetModel(); });
	} else {
		// (Optionally) Limit the amount of training data used
		var n = opts.nTrainingData ? Math.min(opts.nTrainingData, trainingData.length) : trainingData.length;
		return _.shuffle(trainingData).slice(0, n);
	}
})();

// Test data is either provided, generated from targetModel, or taken as some proportion
//   of the provided training data
var _testData = (function() {
	if (typeof testData === 'undefined' && typeof trainingData === 'undefined') {
		return repeat(opts.nGenTestData, function() { return targetModel(); });
	} else if (typeof testData === 'undefined') {
		var _n = opts.testSplit * _trainingData.length;
		// (Optionally) limit the amount of test data used
		var n = opts.nTestData ? Math.min(opts.nTestData, _n) : _n;
		var i = _trainingData.length - n;
		var test = _trainingData.slice(i, _trainingData.length);
		_trainingData.splice(i, n);   // Safe to do mutation here
		return test;
	} else {
		// (Optionally) limit the amount of test data used
		var n = opts.nTestData ? Math.min(opts.nTestData, testData.length) : testData.length;
		return _.shuffle(testData).slice(0, n);
	}
})();

// Do any data preprocessing
if (typeof preprocessData !== 'undefined') {
	preprocessData(_trainingData, _testData);
}

// ----------------------------------------------------------------------------

// Optimize parameters

globalStore.data = _trainingData;

var params = Optimize(model, {
	steps: opts.optimize_nSteps,
	optMethod: opts.optimize_optMethod,
	estimator: opts.optimize_estimator,
	verbose: opts.optimize_verbose,
	logProgress: opts.optimize_logProgress
});

// ----------------------------------------------------------------------------

// Compute & record evaluation metrics

// (Only if model learning) probability of data under learned model
var dataLogProb = !opts.doModelLearning || !opts.doDataLogProb ? undefined : (function() {
	globalStore.data = _testData;
	return ForwardSample(model, {
		guide: true,
		params: params,
		samples: opts.dataLogProb_nSamples
	}).normalizationConstant;
})();

// ESS of guide as importance sampler
var guideESS = !opts.doGuideESS ? undefined : (function() {
	var nDataPoints = Math.min(_testData.length, opts.ess_nDataPoints);
	var ess_estimates = map(function(datum) {
		globalStore.data = [datum];
		var ess = EvaluateGuide(model, {
			samples: opts.ess_nParticles,
			params: params,
			requireGuides: opts.ess_requireGuides
		});
		return (ess / opts.ess_nParticles);
	}, _testData.slice(0, nDataPoints));
	return sum(ess_estimates) / nDataPoints;
})();

// Return
var ret = {
	dataLogProb: dataLogProb,
	guideESS: guideESS,
	elboProgress: !opts.doELBOProgress ? undefined : params.optimizeProgressLog
};
ret;



// // These were useful for debugging in the past, so I'm leaving them here for now

// // Compute expected value of params
// var paramExpectations = function(model, data, params, nSamples) {
// 	globalStore.data = [data[0]];
// 	var post = SampleGuide(model, {params: params, samples: nSamples});
// 	var paramExample = sample(post).params;
// 	return mapObject(function(name, val) {
// 		return expectation(post, function(ret) {
// 			return ad.value(ret.params[name]);
// 		});
// 	}, paramExample);
// };

// // Compute expected value of latents for given datum
// var latentExpectations = function(model, datum, params, nSamples) {
// 	globalStore.data = [datum];
// 	var post = SampleGuide(model, {params: params, samples: nSamples});
// 	var latentExample = sample(post).latents[0];
// 	return mapObject(function(name, val) {
// 		return expectation(post, function(ret) {
// 			return ret.latents[0][name];
// 		});
// 	}, latentExample)
// };