
// --------------------------------------------------------------------------------------

// Common stuff that all models/experiments need

// --------------------------------------------------------------------------------------

// Scalars vs. tensors

var isNumberOrScalarNode = function(x) {
	return (typeof x === 'number') || (ad.isLifted(x) && (typeof ad.value(x) === 'number'));
};

// --------------------------------------------------------------------------------------

// Parameters

var perceptronParams = function(spec, name) {
	var extendname = function(suffix) {
		return name === undefined ? undefined : name + suffix;
	};
	return {
		W_hidden: paramMatrix(spec.nHidden, spec.nIn, extendname('_Whidden')),
		b_hidden: paramVector(spec.nHidden, extendname('_bhidden')),
		W_out: paramMatrix(spec.nOut, spec.nHidden, extendname('_Wout')),
		b_out: paramVector(spec.nOut, extendname('_bout'))
	};
};

// Creating parameters for generative models under different conditions
var makeMuGenerative = function(value, priorMu, priorSigma, paramMu, paramSigma) {
	var prm = function() { return paramScalar(paramMu, paramSigma) };
	return !opts.doModelLearning ?
			value :
		opts.modelLearnType === 'ML' ?
			prm() :
		opts.modelLearnType === 'ML_reg' ?
			sample(Gaussian({mu: priorMu || 0, sigma: priorSigma || 1}), {
				guide: Delta({v: prm()})
			}) :
		opts.modelLearnType === 'VB' ?
			sample(Gaussian({mu: priorMu || 0, sigma: priorSigma || 1}), {
				guide: Gaussian({mu: prm(), sigma: softplus(prm())})
			}) :
		util.fatal('Unrecognized modelLearnType');
};
var makeSigmaGenerative = function(value, priorShape, priorScale, paramMu, paramSigma) {
	var prm = function() { return paramScalar(paramMu, paramSigma) };
	return !opts.doModelLearning ?
			value :
		opts.modelLearnType === 'ML' ?
			softplus(prm()) :
		opts.modelLearnType === 'ML_reg' ?
			sample(Gamma({shape: priorShape || 1, scale: priorScale || 1}), {
				guide: Delta({v: softplus(prm())})
			}) :
		opts.modelLearnType === 'VB' ?
			sample(Gamma({shape: priorShape || 1, scale: priorScale || 1}), {
				guide: Gamma({shape: softplus(prm()), scale: softplus(prm())})
			}) :
		util.fatal('Unrecognized modelLearnType');
};
var makeWeightsGenerative = function(ws, priorAlpha, paramMu, paramSigma) {
	var n = ws !== undefined ? ws.length : priorAlpha.length; 

	var prm = function() { return paramVector(n-1, paramMu, paramSigma) };
	var ones = function() { return Vector(repeat(n, function() { return 1; })); };

	return !opts.doModelLearning ?
		Vector(ws) :
	opts.modelLearnType === 'ML' ?
		simplex(prm()) :
	opts.modelLearnType === 'ML_reg' ?
		sample(Dirichlet({alpha: priorAlpha || ones()}), {
			guide: Delta({v: simplex(prm())})
		}) :
	opts.modelLearnType === 'VB' ?
		sample(Dirichlet({alpha: priorAlpha || ones()}), {
			guide: LogisticNormal({mu: prm(), sigma: softplus(prm())})
		}) :
	util.fatal('Unrecognized modelLearnType "' + opts.modelLearnType + "'");
};
var makeNNParamGenerative = function(n, m, priorMu, priorSigma, paramMu, paramSigma) {
  var prm = function() { return paramMatrix(n, m, paramMu, paramSigma); };
  return
  opts.modelLearnType === 'ML' ?
    prm() :
  opts.modelLearnType === 'ML_reg' ?
    sample(TensorGaussian({mu: priorMu || 0, sigma: priorSigma || 1, dims: [n, m]}), {
      guide: Delta({v: prm()})
    }) :
  opts.modelLearnType === 'VB' ?
    sample(TensorGaussian({mu: priorMu || 0, sigma: priorSigma || 1, dims: [n, m]}), {
      guide: TensorGaussian({mu: prm(), sigma: softplus(prm()), dims: [n, m]})
    }) :
  util.fatal('Unrecognized modelLearnType "' + opts.modelLearnType + "'");
};

// Local mean field guides
var gaussianMeanFieldParams = function(paramMu, paramSigma) {
	var prm = function() { return paramScalar(paramMu, paramSigma) };
	return {mu: prm(), sigma: softplus(prm())};
};
var discreteMeanFieldParams = function(n, paramMu, paramSigma) {
	return simplex(paramVector(n-1, paramMu, paramSigma));
};

// --------------------------------------------------------------------------------------

// Neural network layers, etc.

var linear = function(x, W, b) {
	return T.add(T.dot(W, x), b);
};

var softplus = function(x) {
	return isNumberOrScalarNode(x) ?
		Math.log(Math.exp(x) + 1) :
		T.log(T.add(T.exp(x), 1));
};

var sigmoid = function(x) { 
	return isNumberOrScalarNode(x) ?
		Math.sigmoid(x) :
		T.sigmoid(x);
};

var perceptron = function(x, params) {
	var hidden = sigmoid(linear(x, params.W_hidden, params.b_hidden));
	return linear(hidden, params.W_out, params.b_out);
};

// Transform d dimensional vector onto (d+1)-dimensional simplex
var simplex = function(x) {
	var d = ad.value(x).dims[0];
	var u = T.reshape(T.concat(x, ad.tensor.fromScalars(0)), [d + 1, 1]);
	return T.softmax(u);
};

var logsumexp = function(xs) {
  return Math.log(sum(map(function(x) { return Math.exp(x); }, xs)));
};

// --------------------------------------------------------------------------------------

// Data processing

var mean = function(xs) {
	return sum(xs) / xs.length;
};

var variance = function(xs, optmean) {
	var m = optmean == undefined ? mean(xs) : optmean;
	return reduce(function(x, acc) {
		var diff = x - m;
		return diff*diff + acc;
	}, 0, xs) / xs.length;
};

var stddev = function(xs, optmean) {
	return Math.sqrt(variance(xs, optmean));
};

var standardize = function(x, moments) {
	return (x - moments.mu) / moments.sigma;
};

var computeVariableMoments = function(trainingData, testData) {
	var data = trainingData;	// Could also concat testData, but whatevs.
	globalStore.moments = mapObject(function(varname, varval) {
		var vals = map(function(x) { return x[varname]; }, data);
		var mu = mean(vals);
		var sigma = stddev(vals, mu);
		return {mu: mu, sigma: sigma};
	}, data[0]);
};

// --------------------------------------------------------------------------------------

// Misc.

var assert = function(b, msg) {
	if (!b) { util.fatal(msg); }
};


