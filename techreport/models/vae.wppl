// Variational autoencoder

assert(opts.doModelLearning);

var zDim = opts.zDim || 2;
var hDecodeDim = opts.hDecodeDim || 500;
var hEncodeDim = opts.hEncodeDim || 500;
var xDim = 784;

// Can specify dataset in opts, if desired (useful e.g. for only loading dataset
//    once when running a bunch of experiments on model variants)
var trainingData = opts.trainingData || readDataSetJSON('techreport/data/mnist_images_train.json');
var testData = opts.testData || readDataSetJSON('techreport/data/mnist_images_test.json');

// Recognition network.
// Maps from an input image to the parameters of the guide
// distribution.
var encode = function(x, W, b) {
  var h = T.tanh(T.add(T.dot(W[0], x), b[0]));
  var mu = T.add(T.dot(W[1], h), b[1]);
  var sigma = T.exp(T.add(T.dot(W[2], h), b[2]));
  return {mu: mu, sigma: sigma};
};

// Generative network.
// Maps from the latent space to pixels.
var decode = function(z, W, b) {
  var h = T.tanh(T.add(T.dot(W[0], z), b[0]));
  return T.sigmoid(T.add(T.dot(W[1], h), b[1]));
};

// To avoid having to type out a bunch of undefined's everywhere.
var makeNNParamGenerativeNamed = function(n, m, name) {
  return makeNNParamGenerative(n, m, undefined, undefined, undefined, undefined, name);
};

// Should the model be purely generative (i.e. no mapData)?
globalStore.pureGenerative = false;
// Within mapData, should the model observe or generate?
globalStore.generate = false;

var model = function() {

  // Define parameters.

  // Variational.
  var W0 = param({dims: [hEncodeDim, xDim], name: 'W0'});
  var W1 = param({dims: [zDim, hEncodeDim], name: 'W1'});
  var W2 = param({dims: [zDim, hEncodeDim], name: 'W2'});
  var b0 = param({dims: [hEncodeDim, 1], name: 'b0'});
  var b1 = param({dims: [zDim, 1], name: 'b1'});
  var b2 = param({dims: [zDim, 1], name: 'b2'});

  // Generative.
  var W3 = makeNNParamGenerativeNamed(hDecodeDim, zDim, 'W3');
  var W4 = makeNNParamGenerativeNamed(xDim, hDecodeDim, 'W4');
  var b3 = makeNNParamGenerativeNamed(hDecodeDim, 1, 'b3');
  var b4 = makeNNParamGenerativeNamed(xDim, 1, 'b4');

  if (globalStore.pureGenerative) {
    var z = sample(TensorGaussian({mu: 0, sigma: 1, dims: [zDim, 1]}));
    var probs = decode(z, [W3, W4], [b3, b4]);
    return probs;
    // return sample(MultivariateBernoulli({ps: probs}));
  } else {
    var batchSize = Math.min(opts.batchSize || 100, globalStore.data.length);
    return mapData({data: globalStore.data, batchSize: batchSize}, function(image) {

      var z = sample(TensorGaussian({mu: 0, sigma: 1, dims: [zDim, 1]}), {
        guide: DiagCovGaussian(encode(image, [W0, W1, W2], [b0, b1, b2]))
      });

      var probs = decode(z, [W3, W4], [b3, b4]);

      if (globalStore.generate) {
        return probs;
        // return sample(MultivariateBernoulli({ps: probs}));
      } else {
        factor(MultivariateBernoulli({ps: probs}).score(image));
        return z;
      }
    });
  }
};

// Model-specific Optimize options
var optimizeOpts = {
  steps: 500,
  optMethod: { adam: { stepSize: 0.001 } }
  // steps: 1500,
  // optMethod: { adam: { stepSize: 0.0001 } }
};

// Model-specific quantities to compute / return after optimization

// Generate some samples from the trained model
var generateSamples = function(params){
  globalStore.pureGenerative = true;
  var n = opts.vae_numSampleImages || 20;
  var samps = repeat(n, function() {
    return sample(ForwardSample(model, {
      samples: 1,
      guide: false,
      params: params
    }));
  });
  globalStore.pureGenerative = false;
  return {
    vaeSamples: samps
  };
};

// Encode some test data, then decode it again to see how good
//    the reconstruction is.
var genEncodeDecodeSamples = function(params, testData) {
  globalStore.generate = true;
  var indices = opts.vae_encodeDecodeTargetIndices || 
    repeat(opts.vae_numEncodeDecodeTargets || 4, function() {
      return randomInteger(testData.length);
    });
  var targetReconstructions = map(function(idx) {
    var target = testData[idx];
    globalStore.data = [target];
    var nSamps = opts.vae_numEncodeDecodeSamplesPerTarget || 3;
    var reconstructions =  repeat(nSamps, function() {
      var imgs = sample(ForwardSample(model, {
        samples: 1,
        guide: true,
        params: params
      }));
      return imgs[0]; // because mapData puts it in a list
    });
    return {
      index: idx,
      target: target,
      reconstructions: reconstructions
    };
  }, indices);
  globalStore.generate = false;
  return {
    vaeEncodeDecodeSamples: targetReconstructions
  };
};

// Predict latent codes for test images, but don't reconstruct
// Also spit out the digit identity for each one.
var genLatentCodes = function(params, _testData) {
  var testData = _.shuffle(_testData);
  var testLabels = _.shuffle(readJSON('techreport/data/mnist_labels_test.json'));
  var nToGenerate = opts.vae_numLatentCodes || 500;
  var data = map(function(i) {
    console.log(i);
    var digitID = testLabels[i];
    globalStore.data = [ testData[i] ];
    var code = sample(ForwardSample(model, {
      samples: 1,
      guide: true,
      params: params
    }))[0];    // because mapData puts it in a list
    return {
      id: digitID,
      code: code
    };
  }, _.range(nToGenerate));
  return {
    vaeLatentCodes: data
  };
};

var computeCustomReturns = function(params, testData) {
  // return generateSamples(params);
  return genEncodeDecodeSamples(params, testData);
  // return genLatentCodes(params, testData);
};


