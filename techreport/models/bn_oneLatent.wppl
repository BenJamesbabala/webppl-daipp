// One continuous latent variable feeding into one continuous observed variable.

var nHidden = opts.nHidden || 3;

var preprocessData = computeVariableMoments;

var targetModel = function() {
	var a = sample(Gaussian({mu: 5, sigma: 1}));
	var b = sample(Gaussian({mu: a, sigma: 0.5}));
	return {a: a, b: b};
};

var model = function() {
	// Generative model params
	var mu_a = makeMuGlobal(5);
	var sigma_a = makeSigmaGlobal(1);
	var sigma_b = makeSigmaGlobal(0.5);

	// Guide params
	var nnparams_a = opts.localGuideType === 'MeanField' ? null :
		perceptronParams({nIn: 1, nHidden: nHidden, nOut: 2});

	// Map over data
	var latents = mapData({data: globalStore.data, batchSize: opts.batchSize}, function(datum) {

		// Compute guide params for latent a
		var gparams_a = opts.localGuideType === 'MeanField' ? gaussianMeanFieldParams() : (function() {
			var inputs = Vector([standardize(datum.b, globalStore.moments.b)]);
			var outputs = perceptron(inputs, nnparams_a);
			return {mu: T.get(outputs, 0), sigma: softplus(T.get(outputs, 1))};
		})();

		// Guided sample the latent a
		var a = sample(Gaussian({mu: mu_a, sigma: sigma_a}), {
			guide: Gaussian(gparams_a)
		});

		// Observe datum
		observe(Gaussian({mu: a, sigma: sigma_b}), datum.b);

		// Return latents
		return {a: a};
	});

	// Return global params + latents
	return {
		params: { mu_a: mu_a, sigma_a: sigma_a, sigma_b: sigma_b },
		latents: latents
	};
};